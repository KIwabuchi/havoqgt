diff --git include/havoqgt/wiki_link_metadata.hpp include/havoqgt/wiki_link_metadata.hpp
index e3d9d0c..b923be1 100644
--- include/havoqgt/wiki_link_metadata.hpp
+++ include/havoqgt/wiki_link_metadata.hpp
@@ -23,8 +23,8 @@ namespace havoqgt {
     uint64_t added_at;
     uint64_t deleted_at;
 
-    sha1key added_by;
-    sha1key deleted_by;
+    sha1key added_by; // Not used in the random walk prgoram
+    sha1key deleted_by; // Not used in the random walk prgoram
 
     int type;
     bool redirect;
@@ -33,36 +33,35 @@ namespace havoqgt {
     static std::unordered_map<sha1key, uint64_t, sha1hasher> sha1_label_map;
 
     wiki_link_metadata() : type(0) {} //required due to templatization
-    
+
     void initialize(std::string line) {
       try {
-      std::stringstream ss(line);
-      std::string token;
-      std::vector<std::string> tokens;
-      while( std::getline( ss, token, ' ') ) {
-	tokens.push_back( token );
-      }
-      if( tokens.size() != 9 ) {
-	std::cout << "Bad line in the file. Line: " << line << std::endl;
-	return;
-      }
-      link_from  = std::atol( get_index(tokens, 0).c_str()) - 1;
-      link_to    = std::atol( get_index(tokens, 1).c_str()) - 1;
-
-      // Keita: comment out the lines because they throw an std::exception and the data is not used in the random walk simulation.
-      // added_by   = sha1key( get_index(tokens, 2) );
-      // deleted_by = sha1key( get_index(tokens, 3) );
-
-      added_at   = std::atol( get_index(tokens, 4).c_str());
-      deleted_at = std::atol( get_index(tokens, 5).c_str());
-      if(deleted_at == 0) deleted_at = std::numeric_limits<uint64_t>::max();
-
-      type       = -(std::atoi( get_index(tokens, 6).c_str() ));
-      redirect   = std::atoi( get_index(tokens, 7).c_str() );
-      ns         = std::atoi( get_index(tokens, 8).c_str() );
-
-      } catch( std::exception& e) {
-	std::cout << "exception caught in wiki_link_metadata : " << e.what() << std::endl;
+        std::stringstream ss(line);
+        std::string token;
+        std::vector<std::string> tokens;
+        while (std::getline(ss, token, ' ')) {
+          tokens.push_back(token);
+        }
+        if (tokens.size() != 6) {
+          std::cout << "Bad line in the file. Line: " << line << std::endl;
+          return;
+        }
+        link_from = std::stoull(get_index(tokens, 0));
+        link_to = std::stoull(get_index(tokens, 1));
+
+        ns = std::atoi(get_index(tokens, 2).c_str());
+        const int link_type = std::atoi(get_index(tokens, 3).c_str());
+        redirect = (link_type == 1);
+
+        added_at = std::atol(get_index(tokens, 4).c_str());
+        deleted_at = std::atol(get_index(tokens, 5).c_str());
+        if (deleted_at == 0) deleted_at = std::numeric_limits<uint64_t>::max();
+
+        // Fill with dummy data
+        type = 0; // Note that edges with type==2, which means external link, will be discarded in the random walk program
+
+      } catch (std::exception &e) {
+        std::cout << "exception caught in wiki_link_metadata : " << e.what() << std::endl;
       }
     }
     
diff --git include/havoqgt/wiki_parallel_edge_list_reader.hpp include/havoqgt/wiki_parallel_edge_list_reader.hpp
index 41aeb8d..0578b31 100644
--- include/havoqgt/wiki_parallel_edge_list_reader.hpp
+++ include/havoqgt/wiki_parallel_edge_list_reader.hpp
@@ -87,9 +87,9 @@ protected:
     std::stringstream line_ss(line);
     while( std::getline( line_ss, token, ' ') ) {
       if( i == 0) {
-	edge.first = std::atol(token.c_str()) - 1;
+	edge.first = std::stoull(token);
       } else  if(i == 1) {
-	edge.second = std::atol(token.c_str()) - 1;
+	edge.second = std::stoull(token);
         break;
       }
       i++;
